// NAMA : BAGAS PANGESTU

#include <iostream>
#include <stdlib.h>
using namespace std;

typedef int infotype;
typedef struct TElmtList *address;
typedef struct TElmtList {
        infotype info;
        address next;
}ElmtList;

typedef struct{
        address First;
}List;

//selektor
#define First(L) (L).First
#define Info(P) (P)->info
#define Next(P) (P)->next

void CreateEmpty(List *L){
    First(*L) = NULL;
}

bool IsEmpty(List L){
    return First (L) == NULL;
}

address alok(infotype x){
        address P = address(malloc(sizeof(ElmtList)));

        if(P != NULL){
            Info(P) = x;
            Next(P) = NULL;
        }
        return P;
}

void dealok(address hapus){
    free (hapus);
}

void InsertFirst(List *L, infotype x){
    address P = alok(x);


    if(!IsEmpty(*L)){
            Next(P) = First(*L);
            address temp = Next(First(*L));
            while (Next(temp) != First(*L)){
                temp = Next(temp);
            }
            Next(temp) = P;
            First(*L) = P;
    }else{
        First(*L)= P;
        Next(P) = P;
    }
}

void InsertAfter(List *L, address prec, infotype x){
    address P = alok(x);
    Next(P) = Next(prec);
    Next(prec) = P;
}

void InsertLast(List *L, infotype x){
    address P = alok(x);
    address temp = First(*L);

    if(!IsEmpty(*L)){
            while(Next(temp) != First(*L)){
                temp = Next(temp);
            }
            InsertAfter(&(*L),temp,x);
            Next(temp) = P;
            Next(P) = First(*L);
    }else{
        InsertFirst(&(*L),x);
    }
}

void DeleteFirst(List *L, infotype *x){
    if(IsEmpty(*L)) return;
    if(Next(First(*L)) == First(*L)){
        dealok(First(*L));
        First(*L) = NULL;
    }else{
    address temp = First(*L);
    while (Next(temp)!= First (*L)){
        temp = Next(temp);
    }
    Next(temp)= Next(Next(temp));
    dealok(First(*L));
    First(*L) = Next(temp);
    }
}

void DeleteAfter(List *L, address prec, infotype *x){
    prec = First(*L);
    Next(prec) = Next(Next(First(*L)));
    dealok(Next(prec));


}

void DeleteLast(List *L, infotype *x){
    if(IsEmpty(*L)) return;
    if(Next(First(*L)) == First(*L)){
        dealok(First(*L));
        First(*L) = NULL;
    }else{
     address temp = First(*L);

     while (Next(Next(temp)) != First(*L)){
        temp =Next(temp);
     }
     dealok(Next(temp));
     Next(temp) = First(*L);
}
}

void PrintInfo(List L){
     cout<<'[';

     if(!IsEmpty(L)){
        address P = First(L);
        while(Next(P) != First(L)){
            cout<<Info(P)<<", ";
            P = Next(P);
        }
        cout<<Info(P);
     }
     cout<<']'<<endl<<endl;
}

int main(){
    List L;
    CreateEmpty(&L);
    infotype x;
    int n =1;

    do {
    cout<<"1. Insert First : "<<endl;
    cout<<"2. Insert After : "<<endl;
    cout<<"3. Insert Last  : "<<endl;
    cout<<"4. Delete First : "<<endl;
    cout<<"5. Delete After : "<<endl;
    cout<<"6. Delete Last  : "<<endl;
    cout<<"0. keluar "<<endl<<endl;
    cin>>n;

    switch (n){
            case 1 : cin>>x;
            InsertFirst(&L,x);
            PrintInfo(L);
            break;

            case 2 : cin>>x;
            InsertAfter(&L,First(L),x);
            PrintInfo(L);
            break;

            case 3 : cin>>x;
            InsertLast(&L,x);
            PrintInfo(L);
            break;

            case 4 :
            DeleteFirst(&L,&x);
                PrintInfo(L);
            break;

            case 5 :
            DeleteAfter(&L,First(L),&x);
            PrintInfo(L);
            break;

            case 6 :
            DeleteLast(&L,&x);
            PrintInfo(L);
            break;

            case 0 : return 0;
            break;

            default: cout<<"Input Salah"<<endl;
            break;

            }
    } while (n !=0);

   /* InsertFirst(&L, 10);
    InsertLast(&L, 19);
    InsertAfter(&L,First(L), 30);
    InsertAfter(&L,Next(First(L)), 40);

    //DeleteFirst(&L, &x);
    //DeleteLast(&L, &x);
    DeleteAfter(&L,First(L), &x);
*/
}
